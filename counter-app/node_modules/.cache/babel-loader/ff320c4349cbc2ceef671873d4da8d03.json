{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\ISAAC3N\\\\Dev\\\\react.js-practice\\\\counter-app\\\\src\\\\components\\\\counter.jsx\";\nimport React, { Component } from 'react';\n\nclass Counter extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      count: 1,\n      tags: ['tag1', 'tag2', 'tag3']\n    };\n  }\n\n  /*styles = {\r\n      fontSize: 15,\r\n      fontWeight: \"bold\"\r\n  }; */\n  render() {\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: this.getBadgeClasses(),\n        children: this.formatCount()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary btn-sm\",\n        children: \"Increment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: this.state.tags.map(tag => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: tag\n        }, tag, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 49\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 13\n    }, this); // jsx expression which gets compiled to react.CreateELement\n  }\n\n  getBadgeClasses() {\n    let classes = \"badge m-2 badge-\";\n    classes += this.state.count === 0 ? \"warning\" : \"primary\";\n    return classes;\n  }\n\n  formatCount() {\n    const {\n      count\n    } = this.state;\n    return count === 0 ? 'Zero' : count;\n  }\n\n}\n\nexport default Counter;","map":{"version":3,"sources":["C:/Users/ISAAC3N/Dev/react.js-practice/counter-app/src/components/counter.jsx"],"names":["React","Component","Counter","state","count","tags","render","getBadgeClasses","formatCount","map","tag","classes"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AACA,MAAMC,OAAN,SAAsBD,SAAtB,CAAgC;AAAA;AAAA;AAAA,SAC5BE,KAD4B,GACpB;AACJC,MAAAA,KAAK,EAAE,CADH;AAEJC,MAAAA,IAAI,EAAE,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB;AAFF,KADoB;AAAA;;AAK5B;AACJ;AACA;AACA;AACIC,EAAAA,MAAM,GAAG;AACL,wBACI,QAAC,KAAD,CAAO,QAAP;AAAA,8BACI;AAAM,QAAA,SAAS,EAAG,KAAKC,eAAL,EAAlB;AAAA,kBAA2C,KAAKC,WAAL;AAA3C;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,SAAS,EAAC,0BAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA,kBACK,KAAKL,KAAL,CAAWE,IAAX,CAAgBI,GAAhB,CAAoBC,GAAG,iBAAI;AAAA,oBAAgBA;AAAhB,WAASA,GAAT;AAAA;AAAA;AAAA;AAAA,gBAA3B;AADL;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,CADK,CASL;AACH;;AACDH,EAAAA,eAAe,GAAG;AACd,QAAII,OAAO,GAAG,kBAAd;AACAA,IAAAA,OAAO,IAAK,KAAKR,KAAL,CAAWC,KAAX,KAAqB,CAAtB,GAA2B,SAA3B,GAAuC,SAAlD;AACA,WAAOO,OAAP;AACH;;AAEDH,EAAAA,WAAW,GAAE;AACT,UAAM;AAAEJ,MAAAA;AAAF,QAAY,KAAKD,KAAvB;AACA,WAAOC,KAAK,KAAK,CAAV,GAAa,MAAb,GAAuBA,KAA9B;AACH;;AA7B2B;;AAgChC,eAAeF,OAAf","sourcesContent":["import React, { Component } from 'react';\r\nclass Counter extends Component {\r\n    state = {\r\n        count: 1,\r\n        tags: ['tag1', 'tag2', 'tag3'],\r\n    };\r\n    /*styles = {\r\n        fontSize: 15,\r\n        fontWeight: \"bold\"\r\n    }; */\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <span className= {this.getBadgeClasses()}>{this.formatCount()}</span>\r\n                <button className=\"btn btn-secondary btn-sm\">Increment</button>\r\n                <ul>\r\n                   { this.state.tags.map(tag => <li key={tag}>{ tag }</li>)} \r\n                </ul>\r\n            </React.Fragment> );\r\n        // jsx expression which gets compiled to react.CreateELement\r\n    }\r\n    getBadgeClasses() {\r\n        let classes = \"badge m-2 badge-\";\r\n        classes += (this.state.count === 0) ? \"warning\" : \"primary\";\r\n        return classes;\r\n    }\r\n\r\n    formatCount(){\r\n        const { count } = this.state;\r\n        return count === 0? 'Zero' :  count;\r\n    }\r\n}\r\n  \r\nexport default Counter;"]},"metadata":{},"sourceType":"module"}